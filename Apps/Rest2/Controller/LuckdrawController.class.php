<?php
/**
 * Created by PhpStorm.
 * User: dttx
 * Date: 2017/5/5
 * Time: 13:48
 */

namespace Rest2\Controller;

use Common\Cache\RedisDB;
use Think\Exception;

/**
 * 抽奖
 *
 * Class LuckdrawController
 * @package Rest2\Controller
 */

class LuckdrawController extends ApiController
{

    protected $action_logs = ['post', 'buy', 'free'];

    const CACHE_PREFIX  =   'trj_luckdraw1_';     //缓存名称前缀

    protected static $redisWrite,$redisRead;


    public function _initialize()
    {
        parent::_initialize(); // TODO: Change the autogenerated stub
        if (self::$redisRead instanceof RedisDB == false) {
            self::$redisRead  = redisRead();
        }
        if (self::$redisWrite instanceof RedisDB == false) self::$redisWrite = redisWrite();
    }


    /**
     * subject: 玩法列表
     * api: index
     * author: Mercury
     * day: 2017-05-05 13:49
     * [字段名,类型,是否必传,说明]
     */
    public function index()
    {
        $field = 'id,images,cid,luckdraw_name,game_images';
        $map   = [
            'status'    =>  3,
        ];
        $list = $this->pagelist([
            'table' =>  '',
            'do'    =>  'D',
            'orders'=>  'id asc',
            'where' =>  $map,
            'field' =>  $field,
        ]);

        $this->apiReturn(['code' => 1, 'msg' => '操作成功', 'data' => $list]);
    }

    /**
     * subject: 中奖列表
     * api: lists
     * author: Mercury
     * day: 2017-05-05 13:49
     * [字段名,类型,是否必传,说明]
     */
    public function lists()
    {
        $this->check('openid');
        $map = [
            'uid'   =>  $this->user['id'],
            //'status'=>  ['gt', 0],
            'is_winning'    =>  1,
        ];
        $statusName = ['未发放', '未派送', '已领取'];
        $typeName   = ['', '代金券', '优惠券', '积分', '谢谢'];
        $list = $this->pagelist([
            'table' =>  'luckdraw1_winning',
            'do'    =>  'D',
            'order' =>  'id desc',
            'where' =>  $map,
            'field' =>  'id,intro,type_id,status',
            'p'     =>  $this->post['p'],
        ]);
        if (!empty($list['list'])) {
            foreach ($list['list'] as &$v) {
                $v['statusName']= $statusName[$v['status']];
                $v['typeName']  = $typeName[$v['type_id']];
                if (!empty($v['intro'])) $v['intro'] = unserialize($v['intro']);
            }
            unset($v);
            $this->apiReturn(['code' => 1, 'msg' => '操作成功', 'data' => $list]);
        }
        $this->apiReturn(['code' => 3, 'msg' => '--我是有底线的--']);
    }

    /**
     * subject: 玩法详情
     * api: detail
     * author: Mercury
     * day: 2017-05-05 13:50
     * [字段名,类型,是否必传,说明]
     */
    public function item()
    {
        $this->check('id');
        $data = $this->getData($this->post['id']);
        //全部异步取中奖信息？
        if ($data) $this->apiReturn(['code' => 1, 'data' => $data]);
        $this->apiReturn(['code' => 3]);
    }

    /**
     * subject: 抽奖
     * api: post
     * author: Mercury
     * day: 2017-05-05 13:51
     * [字段名,类型,是否必传,说明]
     */
    public function post()
    {
        $s = microtime(true);
        $this->check(['id', 'openid']);

        //if (!$this->user['password_pay']) $this->ajaxReturn(['code' => 402, 'msg' => '请设置安全密码']);
        $data = $this->getData($this->post['id']);
        if ($data == false) $this->apiReturn(['code' => 0]);    //如果游戏不存在则返回false
        //if ($this->user['openid'] != 'b3afac450126aea7e45edb9588ad5323') {
            /**
             * 检测可抽奖次数
             */
            $getUserCache = self::$redisRead->hGetAll(self::setCacheName($this->user['erp_uid']));   //获取缓存的信息
            $flag = $this->checkNum($getUserCache);
            if($flag === false) {
                $this->apiReturn(['code' => -1, 'msg' => '机会已用完', 'data' => ['position' => $data['position'], 'draw_id' => $this->post['id'], 'tangbao' => C('CFG.luckdraw')['luckdraw_tangbao']]]);
            }
        //}
        $prize= $this->luck($data['id'], $data, true);
        $e = microtime(true);
        //writeLog($e - $s);
        $this->apiReturn($prize);
    }

    /**
     * subject: 购买抽奖次数
     * api: buy
     * author: Mercury
     * day: 2017-05-05 14:10
     * [字段名,类型,是否必传,说明]
     */
    public function buy()
    {
        $s = microtime(true);
        //生成唐宝兑换订单
        $this->check('id,openid');
        //if (!$this->user['password_pay']) $this->ajaxReturn(['code' => 402, 'msg' => '请设置安全密码']);
        $data   = $this->getData($this->post['id']);    //获取游戏信息
        if ($data == false) $this->apiReturn(['code' => 0, 'msg' => '游戏不存在']);

        /**
         * 如果唐宝里面有机会的话则直接跳转到抽奖代码段
         */
        if (self::$redisRead->hGet(self::setCacheName($this->user['erp_uid']), 'tNum') > 0) goto gotoNext;


        $cData['order_no']  = $this->create_orderno('LT',$this->uid);
        $cData['uid']       = $this->user['id'];
        $cData['tangbao']   = C('CFG.luckdraw')['luckdraw_tangbao'];
        $cData['pay_status']= 2;
        $param['orderID']   = $cData['order_no'];
        $param['tangbao']   = $cData['tangbao'];

        $res = A('Erp')->luckdraw_tangbao_chance($param);
        if ($res['id'] != 1001) $this->apiReturn(['code' => 0, 'msg' => $res['info'] . $res['msg'] . '购买失败！']);
        if (M('luckdraw_chance_exchange')->add($cData) == false) $this->apiReturn(['code' => 0, 'msg' => '购买失败']);
        //唐宝+1
        self::$redisWrite->hIncrBy(self::setCacheName($this->user['erp_uid']), 'tNum', 1);
        gotoNext:
        $prize  = $this->luck($data['id'], $data);
        $e = microtime(true);
        //writeLog($e - $s);
        if ($prize['code'] == 0) $this->apiReturn(['code' => $prize['code'], 'msg' => $prize['msg']]);  //抽奖失败
        $this->apiReturn(['code' => 1, 'data' => $prize['data']]);
    }

    /**
     * subject: 获取用户浏览历史记录，用来筛选优惠券
     * api: getUserLike
     * author: Mercury
     * day: 2017-05-05 16:55
     * [字段名,类型,是否必传,说明]
     */
    protected function getUserLike()
    {

    }

    /**
     * subject: 获取数据
     * api: getData
     * author: Mercury
     * day: 2017-05-06 10:00
     * [字段名,类型,是否必传,说明]
     * @param $id
     * @return mixed
     */
    protected function getData($id)
    {
        $map = [
            'id'    =>  $id,
            'status'=>  3
        ];
        $model = M('luckdraw1');
        $data  = $model->cache(true)->where($map)->find();
        return $data;
    }

    /**
     * subject: 抽奖
     * api: luck
     * author: Mercury
     * day: 2017-05-10 9:13
     * [字段名,类型,是否必传,说明]
     * @param $drawId   游戏ID
     * @param $luck     游戏内容
     * @param bool $isFree  是否免费
     * @return array
     */
    protected function luck($drawId, $luck, $isFree = false)
    {
        try {
            $model     = M('luckdraw1_prize');
            $model->startTrans();
            //$redisWrite->multi();
            /**
             * 如果使用的唐宝则唐宝减1,否则抽奖减1
             */
            if ($isFree === false) {
                self::$redisWrite->hIncrBy(self::setCacheName($this->user['erp_uid']), 'tNum', -1);
            }


            //以下代码仅限于00:05:00-24:00:00时执行
            $cacheName = ['luckdraw' => $drawId];        //用户存储字符串
            $str = self::$redisRead->lRange(self::setCacheName($cacheName), 0, 0); //查找队列里面是否有数据

            $prizeList = $model->cache((!empty($str) ? true : false))->where(['luckdraw_id' => $drawId, 'status' => 1])->field('atime,etime,status', true)->order('sort asc')->select();
            //writeLog($prizeList);
            //使用排序作为key
            $prizeList = array_reduce($prizeList, function (&$prizeList, $val) {
                $prizeList[$val['sort']] = $val;
                return $prizeList;
            });


            //每晚24点至24点过5分不给中奖
            $unLuckTime = strtotime(date('Y-m-d', NOW_TIME)) + 300;
            if ($unLuckTime > NOW_TIME) {

                //每天清除
//                if (S('luckdraw_update_todays_count') == false) {
//                    $flag = true;
//                    foreach ($prizeList as $item) {
//                        $flag = $redisWrite->set(self::setCacheName(['luckdraw' => $drawId, 'position' => $item['id']]), 0);
//                        if ($flag == false) break;
//                    }
//                    if ($flag) S('luckdraw_update_todays_count', 1, 3600);
//                }
                $data = self::getNoLuckData($prizeList);    //取出未中奖的位置
                goto unLuckdraw;    //如果为凌晨0点5分内则不出列
            }



            //入列
            if (empty($str)) {    //没数据的话就得入列
                $str = '';
                foreach ($prizeList as $k => $v) {
                    for ($i=1;$i<=(int)$v['probability'];$i++) {     //按百分比取出一定数量的key
                        $str .= $k;
                    }
                }
                if (!$str) throw new Exception('生成失败');
                $str    = str_shuffle($str); //打乱字符串
                $length = strlen($str);     //获取字符串长度
                for ($i = 0; $i < $length; $i++) {    //进行入列
                    self::$redisWrite->lPush(self::setCacheName($cacheName), $str[$i]);
                }
            }
            $luckKey = self::$redisWrite->lPop(self::setCacheName($cacheName));   //出列取出奖品KEY出列
            if ($luckKey == false) throw new Exception('出列失败');
            $data           = $prizeList[$luckKey];
            if (!$data['type_id']) throw new Exception('未知错误');
            $positionCacheName = ['luckdraw' => $drawId, 'position' => $data['id']];
            $countWinning   = self::$redisRead->get(self::setCacheName($positionCacheName));
            if ($countWinning >= $data['max_winning'] && $data['max_winning'] > 0) {    //如果中奖次数已经大于或者等于每天最高可中奖次数的时候则取未中奖奖品
                $data = self::getNoLuckData($prizeList);    //取出未中奖的位置
                if (empty($data['type_id'])) throw new Exception('未知错误2');
            }
            //不出列执行代码段
            unLuckdraw:

            if (self::$redisWrite->incr(self::setCacheName($positionCacheName)) == false) throw new Exception('数量+1失败');
            //如果过期时间返回false的话 就再次设置过期时间
            if (self::$redisRead->ttl(self::setCacheName($positionCacheName)) == -1) self::$redisWrite->expireat(self::setCacheName($positionCacheName), strtotime(date('Y-m-d', strtotime('+1 day'))));

            //中奖数量加一
            //$prize   = M('luckdraw1_prize_list')->where(['id' => $data['prize_id']])->find();  //取出奖品 20170515已去除此表
            //1代金券，2优惠券，3积分，4未中奖
            $orderNo = $this->create_orderno('LD'); //order no
            $status  = 0;   //默认未发放
            $url     = '';  //url
            $isWinning = 0; //是否中奖
            $intro   = [];  //详细信息
            switch ($data['type_id']) {
                case 1:
                    //代金券发放
                    $url = DM('m');
                case 2:
                    //找到优惠券
                    $tmps     = explode(',', trim($data['value'], ','));  //把奖品转换成数组
                    $tmpCnt   = count($tmps)-1;   //统计共有几个
                    $couponId = $tmps[rand(0, $tmpCnt)];    //随机取出一个

                    if (!$couponId) throw new Exception('奖品中已无优惠券');

                    /**
                     * 如果不存在则创建当前field
                     */
                    $couponCacheName = ['luckdraw' => $drawId, 'type' => 'coupon'];
                    if (self::$redisRead->hExists(self::setCacheName($couponCacheName), $couponId) === false) {
                        $num = M('coupon_batch')->where(['id' => $couponId])->field('num,get_num')->find();
                        $num = $num['get_num'] ? $num['num'] - $num['get_num'] : $num['num'];
                        if ($num <= 0) {
                            $tmpValue = join(',', array_merge(array_diff($tmps, [$couponId])));
                            $tmpR_Value = $data['r_value'] ? $data['r_value'] . ',' . $couponId : $couponId;
                            if (false == M('luckdraw1_prize')->where(['id' => $data['id']])->save(['value' => $tmpValue, 'r_value' => $tmpR_Value])) throw new Exception('移除优惠券失败');
                            $data = self::getNoLuckData($prizeList);    //取出未中奖的位置
                            goto unLuckdraw;    //如果为凌晨0点5分内则不出列
                        }
                        self::$redisWrite->hIncrBy(self::setCacheName($couponCacheName), $couponId, (int)$num);
                    } else {    //递减
                        $cntNum = self::$redisRead->hGet(self::setCacheName($couponCacheName), $couponId);
                        if ($cntNum == 1) {    //如果等于1的话则需要移除当前优惠券信息
                            $tmpValue = join(',', array_merge(array_diff($tmps, [$couponId])));
                            $tmpR_Value = $data['r_value'] ? $data['r_value'] . ',' . $couponId : $couponId;
                            $sql = 'UPDATE ' . C('DB_PREFIX') . 'coupon_batch SET get_num=num WHERE id =' . $couponId;
                            if (false === $model->execute($sql)) throw new Exception('更新数量失败');
                            if (false == M('luckdraw1_prize')->where(['id' => $data['id']])->save(['value' => $tmpValue, 'r_value' => $tmpR_Value])) throw new Exception('移除优惠券失败');
                        } elseif ($cntNum < 1) {
                            $data = self::getNoLuckData($prizeList);    //取出未中奖的位置
                            goto unLuckdraw;    //如果为凌晨0点5分内则不出列
                        }
                    }
                    //优惠券减1
                    self::$redisWrite->hIncrBy(self::setCacheName($couponCacheName), $couponId, -1);


                    //如果优惠券已被领完则剔除当前优惠券
                    $coupon   = M('coupon_batch')->where(['id' => $couponId])->field('id,price,sday,eday,shop_id,min_price,type,use_type,face_type')->cache(true)->find();   //取出优惠券批次

                    if (!$coupon) throw new Exception('优惠券不存在');
                    $code     = md5($this->user['openid'] . microtime(true) . $this->user['id']);    //优惠券编码
                    $cData    = [   //优惠券领取填充数据
                        'uid'   =>  $this->user['id'],               //用户ID
                        'b_id'  =>  $coupon['id'],                   //优惠券批次ID
                        'price' =>  $coupon['price'],                      //优惠券金额
                        'code'  =>  $code,                  //优惠券唯一编码
                        'sday'  =>  $coupon['sday'],        //优惠券可使用时间-开始
                        'eday'  =>  $coupon['eday'],        //优惠券可使用时间 - 结束
                        'shop_id'   =>  $coupon['shop_id'], //所属商家
                        'min_price' =>  $coupon['min_price'],   //优惠券最低消费
                        'is_use'    =>  0,  //是否已使用
                        'status'    =>  1,  //当前状态
                        'channel'   =>  2,  //来源。1领取，2抽奖
                        'type'      =>  $coupon['type'],//类型 店铺优惠券 类型1=店铺优惠券,2=官方优惠券,3=第三方优惠券
                        'use_type'  =>  $coupon['use_type'],//使用场景1=通用型,2=指定店铺,3=指定商品,4=指定类目
                        'face_type' =>  $coupon['face_type'],//面值类型1=优惠券,2=现金券
                        'ip'        =>  get_client_ip(),    //获取用户IP地址
                        'short_code'=>  shortUrl($code),    //优惠券短编码
                        //'shop_id'   =>  $coupon['shop_id'],
                    ];
                    //优惠券发放
                    if (false == M('coupon')->add($cData)) throw new Exception('优惠券或代金券发放失败');
                    if (false == M('coupon_batch')->where(['id' => $couponId])->setInc('get_num', 1, 60)) throw new Exception('优惠券领取数量增加失败');
                    $status = 2;    //设为已领取
                    $tmpCoupon = [
                        'min_price' =>  $coupon['min_price'],
                        'price'     =>  $coupon['price'],
                        'sday'      =>  str_replace('-', '.', $coupon['sday']),
                        'eday'      =>  str_replace('-', '.', $coupon['eday']),
                        'url'       =>  $url,
                        'objectId'  =>  $couponId,
                        'shop_id'   =>  $coupon['shop_id'],
                    ];
                    //商家店铺地址
                    if ($coupon['shop_id']) {
                        $tmpCoupon['shop_name'] =   M('shop')->cache(true)->where(['id' => $coupon['shop_id']])->getField('shop_name');
                        $url = DM('m', '/shop/index/shop_id/' . $coupon['shop_id']);
                        $tmpCoupon['url']       = $url;
                    }
                    break;
                case 3:
                    $param['orderID']   = $orderNo; //order no
                    $param['score']     = (float)$data['value'];   //赠送积分
                    $erp_res = A('Erp')->luckdraw_award_score($param);
                    if($erp_res['code']==1){
                        //将中奖记录改为已领取，已发放
                        $status = 2;    //设为已领取
                    }
                    $score     = $param['score'];   //奖励积分
                    $tmpCoupon['score'] =   $score;
                    //积分发放
                    break;
                case 4:
                    //未中奖
                    break;
            }

            if (in_array($data['type_id'], [1,2,3])) {
                $isWinning = 1; //中奖设为1
                if (false == M('luckdraw1')->where(['id' => $drawId])->setInc('num_winning', 1, 60)) throw new Exception('更新游戏中奖次数失败');
            }

            if (false == M('luckdraw1')->where(['id' => $drawId])->setInc('num_count', 1, 60)) {
                throw new Exception('更新游戏抽奖次数失败');
            }
            if (false == M('luckdraw1_prize')->where(['id' => $data['id']])->setInc('count_winning', 1, 60)) {
                throw new Exception('更新游戏奖品中奖数量失败');
            }
//            if (false == M('luckdraw1_prize_list')->where(['id' => $data['prize_id']])->setInc('count_winning', 1, 60)) {
//                throw new Exception('更新奖品列表中奖数量失败');
//            }
            //取得奖品名称
            $peizeType = M('luckdraw1_prize_category')->cache(true)->where(['id' => $data['type_id']])->getField('name');
            //chou jiang ji lv
            $iData = [
                'uid'       =>  $this->user['id'],  //抽奖用户
                'prize_id'  =>  $data['id'],   //中奖奖品ID
                'type_id'   =>  $data['type_id'],  //奖品类型
                'l_no'      =>  $orderNo,    //编号
                'luck_id'   =>  $drawId,        //游戏ID
                'luck_name' =>  $luck['luckdraw_name'], //游戏名称
                'cid'       =>  $luck['cid'],             //玩法ID
                'prize_name'    =>  $peizeType,   //奖品名称
                'status'        =>  $status, //发放状态 0未发放，1已发放，2已领取
                'is_free'   =>  $isFree === true ? 1 : 0, //是否免费抽奖
                'is_winning'=>  $isWinning, //是否中奖
                'shop_id'   =>  $coupon['shop_id'] ? : 0,
                'intro'     =>  !empty($tmpCoupon) ? serialize($tmpCoupon) : '',
            ];
            if (false == M('luckdraw1_winning')->add($iData)) throw new Exception('添加抽奖记录失败');
            //fa fang li pin
            //0不中，10为a以此类推
            //排序 0-9 a-z A-Z
            if (isset($tmpCoupon['sday'])) $tmpCoupon['sday'] = substr($tmpCoupon['sday'], strpos($tmpCoupon['sday'], '.')+1);
            if (isset($tmpCoupon['eday'])) $tmpCoupon['eday'] = substr($tmpCoupon['eday'], strpos($tmpCoupon['eday'], '.')+1);
            $model->commit();
            $tmp['code']   = 1;
            $tmp['msg']    = '操作成功';
            $tmp['data']['draw_id']   = $drawId;    //抽奖ID
            $tmp['data']['sort']      = $data['sort'];  //排序
            $tmp['data']['type']      = $data['type_id'];  //类型
            $tmp['data']['url']       = $url;               //url
            $tmp['data']['coupon']    = $tmpCoupon;         //优惠券信息
            $tmp['data']['score']     = $score;             //奖励的积分
            $tmp['data']['position']  = $luck['position'];  //位置数量

            return $tmp;    //中奖的信息
            //return null;
        } catch (Exception $e) {
            $model->rollback();
            $data = self::getNoLuckData($prizeList);
            $tmp['code']   = 1;
            $tmp['msg']    = $e->getMessage();
            $tmp['data']['info']      = $e->getMessage();
            $tmp['data']['draw_id']   = $drawId;    //抽奖ID
            $tmp['data']['sort']      = $data['sort'];  //排序
            $tmp['data']['type']      = $data['type_id'];  //类型
            $tmp['data']['position']  = $luck['position'];  //位置数量
            $tmp['data']['url']       = '';
            return $tmp;
                //['code' => 0, 'msg' => $e->getMessage()];
        }
    }

    /**
     * subject: 赠送免费次数
     * api: freeNum
     * author: Mercury
     * day: 2017-05-11 11:17
     * [字段名,类型,是否必传,说明]
     */
    public function free()
    {
        $this->check('erp_uid');
        $today      = date('Y-m-d', NOW_TIME);
        if (self::$redisRead->hGet(self::setCacheName($this->post['erp_uid']), 'time') == $today) $this->apiReturn(['code' => 0, 'msg' => '已领取过']);
        //1针对所有，2针对单个
        $data = [
            'erp_uid'   =>  $this->post['erp_uid'], //erpUID
            'num'       =>  (int)C('CFG.luckdraw')['luckdraw_free_num'], //赠送次数
            'type'      =>  (int)C('CFG.luckdraw')['luckdraw_free_type'],    //赠送类型：1所有共用，单个使用
            //'tNum'      =>  0,  //唐宝次数
            'use'       =>  '', //使用情况, 序列化数组 [id => num] 每次签到则清空前一天所抽奖的ID
            'time'      =>  $today, //领取时间
        ];
        $flag  = self::$redisWrite->hMSet(self::setCacheName($this->post['erp_uid']), array_keys($data), array_values($data));
        if ($flag) $this->apiReturn(['code' => 1]);
        $this->apiReturn(['code' => 0]);
    }

    /**
     * subject: 判断用户是否可以签到
     * api: isFree
     * author: Mercury
     * day: 2017-05-22 10:00
     * [字段名,类型,是否必传,说明]
     */
    public function isFree()
    {
        $this->check('erp_uid');
        $today      = date('Y-m-d', NOW_TIME);
        if (self::$redisRead->hGet(self::setCacheName($this->post['erp_uid']), 'time') == $today) $this->apiReturn(['code' => 0, 'msg' => '已领取过']);
        $this->apiReturn(['code' => 1]);
    }

    /**
     * subject: 测试key过期时间
     * api: testExpire
     * author: Mercury
     * day: 2017-05-23 9:42
     * [字段名,类型,是否必传,说明]
     */
    public function testExpire()
    {
        return false;
        $positionCacheName = ['key' => 'test', 'num' => 1];
        $time = self::$redisRead->ttl(self::setCacheName($positionCacheName));
        //$this->apiReturn(['code' => $time]);
        if ($time < 1) {
            $times = time() + 1600;
            //redisWrite()->expireat();
            self::$redisWrite->set(self::setCacheName($positionCacheName), date('Y-m-d H:i:s', $times));
            $flag = self::$redisWrite->expireat(self::setCacheName($positionCacheName), $times);
            $this->apiReturn(['code' => $time, 'name' => self::setCacheName($positionCacheName), 'flag' => $flag, 'data' => $times, 'date' => date('Y-m-d H:i:s', $times), 'key' => http_build_query($positionCacheName)]);
        }
        $this->apiReturn(['code' => 1, 'data' => $time, 'key' => http_build_query($positionCacheName), 1 => strtotime(date('Y-m-d', strtotime('+1 day'))), 2 => date('Y-m-d H:i:s', strtotime(date('Y-m-d', strtotime('+1 day'))))]);
    }
    
    /**
     * subject: 领取未发放的积分
     * api: receiveScore
     * author: Mercury
     * day: 2017-05-17 10:09
     * [字段名,类型,是否必传,说明]
     */
    public function receiveScore()
    {
        $this->check('openid,id');
        $cacheName = ['luckdraw_id' => $this->post['id'], 'openid' => $this->post['openid']];
        if (self::$redisRead->get(self::setCacheName($cacheName))) $this->apiReturn(['code' => 0, 'msg' => '若领取失败请于10分钟后再次领取']);
        self::$redisWrite->set(self::setCacheName($cacheName), 1);
        self::$redisWrite->expire(self::setCacheName($cacheName), 600);   //10分钟后过期
        $map  = [
            'uid'   =>  $this->user['id'],
            'status'=>  0,
            'id'    =>  $this->post['id'],
            'is_winning'=>  1,
            'type_id'   =>  3,
        ];
        $model = M('luckdraw1_winning');
        $data = $model->where($map)->field('l_no,intro')->find();
        if (!$data) $this->apiReturn(['code' => 0, 'msg' => '非法操作']);
        if ($data['intro']) $intro = unserialize($data['intro']);
        if (!$intro['score'])  $this->apiReturn(['code' => 0, 'msg' => '非法操作']);
        $param['orderID']   = $data['l_no']; //order no
        $param['score']     = (float)$intro['score'];   //赠送积分
        $erp_res = A('Erp')->luckdraw_award_score($param);
        if($erp_res['code']==1){
            //将中奖记录改为已领取，已发放
            if ($model->where($map)->save(['status' => 2]) == false) $this->apiReturn(['code' => 0]);
        } else {
            $this->apiReturn(['code' => 0, 'msg' => $erp_res['info'] . $erp_res['msg']]);
        }
        $this->apiReturn(['code' => 1]);
    }

    /**
     * subject: 获取谢谢抽奖的位置
     * api: getNoLuckData
     * author: Mercury
     * day: 2017-05-15 17:57
     * [字段名,类型,是否必传,说明]
     * @param $data     奖品list
     * @param int $prize 4 为未抽到
     * @return array
     */
    protected static function getNoLuckData($data)
    {
        $prize = 4;
        $tmp  = array_filter($data, function ($child) use ($prize) {
            return $child['type_id'] == $prize;
        });
        $tmp  = $tmp[array_keys($tmp)[0]];
        return $tmp;
    }


    /**
     * subject: 检测可以抽奖数量
     * api: checkNum
     * author: Mercury
     * day: 2017-05-21 13:47
     * [字段名,类型,是否必传,说明]
     * @param $getUserCache
     * @return bool
     */
    protected function checkNum($getUserCache)
    {
        $num = $getUserCache['num'];
        $cacheName = self::setCacheName($this->user['erp_uid']);
        try {
            if ($getUserCache['type'] == 1) {   //所有
                if ($num <= 0) throw new Exception('num');  //如果机会小于等于0的话则查看是否有订单及唐宝记录
                self::$redisWrite->hIncrBy($cacheName, 'num', -1);  //  减去机会
            } else {    //单个,每个游戏都有一次机会
                if ($getUserCache['time'] != date('Y-m-d', NOW_TIME)) throw new Exception('no sign');   //如果签到时间不是今天，则返回false
                $use = json_decode($getUserCache['use'], true);
                if ($use[$this->post['id']]) {
                    $num -= $use[$this->post['id']];
                    $use[$this->post['id']] += 1;
                } else {
                    $use[$this->post['id']] = 1;
                }
                if ($num > 0) {
                    self::$redisWrite->hSet($cacheName, 'use', json_encode($use));
                } else {
                    throw new Exception('use');
                }
            }
            return true;
        } catch (Exception $e) {
            if ($getUserCache['orders'] > 0) {  //订单免费机会
                self::$redisWrite->hIncrBy($cacheName, 'orders', -1);  //  减去机会
                return true;
            } elseif ($getUserCache['tNum'] > 0) {    //唐宝机会
                self::$redisWrite->hIncrBy($cacheName, 'tNum', -1);  //  减去机会
                return true;
            }
            return false;
        }
    }

    /**
     * subject: 设置缓存名称
     * api: setCacheName
     * author: Mercury
     * day: 2017-05-11 16:36
     * [字段名,类型,是否必传,说明]
     * @param $param
     * @return string
     */
    protected static function setCacheName($param)
    {
        if (is_array($param)) $param = http_build_query($param);
        return self::CACHE_PREFIX . md5($param);
    }
}